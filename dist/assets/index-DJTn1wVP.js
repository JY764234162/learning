const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/SlowComponent-CYXom8fK.js","assets/index-Gqy7a80Z.js","assets/index-C6ZWRxdJ.css","assets/index-Dn3wCLmq.js"])))=>i.map(i=>d[i]);
import{r,G as e,O as x,S as p,D as j}from"./index-Gqy7a80Z.js";import{ae as h,L as o,af as l,ag as u}from"./index-Dn3wCLmq.js";import{B as m}from"./button-yQPWasjd.js";import{D as a}from"./index-CO2Ul_Wc.js";const{Title:S,Paragraph:t,Text:i}=u,g=()=>{const s=r.lazy(()=>new Promise(n=>{setTimeout(()=>{n(x(()=>import("./SlowComponent-CYXom8fK.js"),__vite__mapDeps([0,1,2,3])))},2e3)}));return e.jsx(l,{title:"加载区域",style:{marginTop:16},children:e.jsx(r.Suspense,{fallback:e.jsx(y,{}),children:e.jsx(s,{})})})},y=()=>e.jsx("div",{style:{textAlign:"center",padding:"20px"},children:e.jsx(p,{indicator:e.jsx(j,{style:{fontSize:24},spin:!0}),tip:"Loading..."})}),w=()=>{const[s,n]=r.useState(0),c=()=>{setTimeout(()=>{n(d=>d+1)},100)};return e.jsxs("div",{style:{maxWidth:"800px",margin:"0 auto",padding:"20px"},children:[e.jsx(S,{level:2,children:"React Suspense 演示"}),e.jsx(h,{type:"info",message:"什么是 React Suspense？",description:"Suspense 是 React 提供的一种内置机制，用于优雅地处理异步操作（如数据加载、组件延迟加载等）。它允许我们在内容加载完成之前展示一个加载状态，提升用户体验。",showIcon:!0,style:{marginBottom:"20px"}}),e.jsxs(o,{direction:"vertical",style:{width:"100%"},children:[e.jsx(l,{title:"演示效果",extra:e.jsx(o,{children:e.jsx(m,{onClick:c,children:"重新演示"})}),children:e.jsx(g,{},s)}),e.jsxs(l,{title:"使用说明",children:[e.jsx(t,{children:e.jsx(i,{strong:!0,children:"基本概念："})}),e.jsxs("ul",{children:[e.jsx("li",{children:"Suspense 包裹可能需要等待的内容"}),e.jsx("li",{children:"fallback 属性指定加载状态的展示内容"}),e.jsx("li",{children:"可以配合 lazy 实现组件的动态加载"}),e.jsx("li",{children:"支持嵌套使用，形成加载边界"})]}),e.jsx(a,{}),e.jsx(t,{children:e.jsx(i,{strong:!0,children:"代码示例："})}),e.jsx("pre",{style:{background:"#f6f8fa",padding:"16px",borderRadius:"6px"},children:`// 1. 使用 lazy 定义需要延迟加载的组件
const SlowComponent = lazy(() => import('./SlowComponent'));

// 2. 使用 Suspense 包裹可能暂停的内容
function MyComponent() {
  return (
    <Suspense fallback={<LoadingSpinner />}>
      <SlowComponent />
    </Suspense>
  );
}`}),e.jsx(a,{}),e.jsx(t,{children:e.jsx(i,{strong:!0,children:"注意事项："})}),e.jsxs("ul",{children:[e.jsx("li",{children:"确保 fallback 组件是一个轻量级的加载指示器"}),e.jsx("li",{children:"可以在不同层级使用 Suspense 来细化加载边界"}),e.jsx("li",{children:"建议配合 ErrorBoundary 处理加载错误"}),e.jsx("li",{children:"React 18 中对 Suspense 有更好的并发渲染支持"})]})]})]})]})};export{w as default};
