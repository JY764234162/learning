const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["./SlowComponent-B374H_0m.js","../../main-DW6fm0rT.js","../csss/main-Bw_7KRML.css","./index-CZmLImwT.js"])))=>i.map(i=>d[i]);
import{r as i,j as e,T as p,B as x,aM as j,S as u,R as h}from"../../main-DW6fm0rT.js";import{A as m}from"./index-sLMO7Dxs.js";import{S as o}from"./index-CJaqqdSo.js";import{C as l}from"./index-CZmLImwT.js";import{D as a}from"./index-kr04UTMv.js";import"./ExclamationCircleFilled-Dww69ole.js";import"./InfoCircleFilled-Cd0jSmYn.js";const{Title:S,Paragraph:r,Text:t}=p,y=()=>{const s=i.lazy(()=>new Promise(n=>{setTimeout(()=>{n(j(()=>import("./SlowComponent-B374H_0m.js"),__vite__mapDeps([0,1,2,3]),import.meta.url))},2e3)}));return e.jsx(l,{title:"加载区域",style:{marginTop:16},children:e.jsx(i.Suspense,{fallback:e.jsx(f,{}),children:e.jsx(s,{})})})},f=()=>e.jsx("div",{style:{textAlign:"center",padding:"20px"},children:e.jsx(u,{indicator:e.jsx(h,{style:{fontSize:24},spin:!0}),tip:"Loading..."})}),_=()=>{const[s,n]=i.useState(0),c=()=>{setTimeout(()=>{n(d=>d+1)},100)};return e.jsxs("div",{style:{maxWidth:"800px",margin:"0 auto",padding:"20px"},children:[e.jsx(S,{level:2,children:"React Suspense 演示"}),e.jsx(m,{type:"info",message:"什么是 React Suspense？",description:"Suspense 是 React 提供的一种内置机制，用于优雅地处理异步操作（如数据加载、组件延迟加载等）。它允许我们在内容加载完成之前展示一个加载状态，提升用户体验。",showIcon:!0,style:{marginBottom:"20px"}}),e.jsxs(o,{direction:"vertical",style:{width:"100%"},children:[e.jsx(l,{title:"演示效果",extra:e.jsx(o,{children:e.jsx(x,{onClick:c,children:"重新演示"})}),children:e.jsx(y,{},s)}),e.jsxs(l,{title:"使用说明",children:[e.jsx(r,{children:e.jsx(t,{strong:!0,children:"基本概念："})}),e.jsxs("ul",{children:[e.jsx("li",{children:"Suspense 包裹可能需要等待的内容"}),e.jsx("li",{children:"fallback 属性指定加载状态的展示内容"}),e.jsx("li",{children:"可以配合 lazy 实现组件的动态加载"}),e.jsx("li",{children:"支持嵌套使用，形成加载边界"})]}),e.jsx(a,{}),e.jsx(r,{children:e.jsx(t,{strong:!0,children:"代码示例："})}),e.jsx("pre",{style:{background:"#f6f8fa",padding:"16px",borderRadius:"6px"},children:`// 1. 使用 lazy 定义需要延迟加载的组件
const SlowComponent = lazy(() => import('./SlowComponent'));

// 2. 使用 Suspense 包裹可能暂停的内容
function MyComponent() {
  return (
    <Suspense fallback={<LoadingSpinner />}>
      <SlowComponent />
    </Suspense>
  );
}`}),e.jsx(a,{}),e.jsx(r,{children:e.jsx(t,{strong:!0,children:"注意事项："})}),e.jsxs("ul",{children:[e.jsx("li",{children:"确保 fallback 组件是一个轻量级的加载指示器"}),e.jsx("li",{children:"可以在不同层级使用 Suspense 来细化加载边界"}),e.jsx("li",{children:"建议配合 ErrorBoundary 处理加载错误"}),e.jsx("li",{children:"React 18 中对 Suspense 有更好的并发渲染支持"})]})]})]})]})};export{_ as default};
